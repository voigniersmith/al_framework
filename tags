!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/andrew/Projects/al_framework/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/39a01724/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
APP_HPP	./src/app.hpp	/^#define APP_HPP$/;"	d
AUDIO_HPP	./src/audio.hpp	/^#define AUDIO_HPP$/;"	d
App	./src/app.hpp	/^class App$/;"	c
App::audio	./src/app.hpp	/^ 	Audio audio;$/;"	m	class:App	typeref:typename:Audio	access:private
App::destroy	./src/app.hpp	/^		void destroy();$/;"	p	class:App	typeref:typename:void	access:public	signature:()
App::init	./src/app.hpp	/^		void init(int, char**);$/;"	p	class:App	typeref:typename:void	access:public	signature:(int,char **)
App::show_help	./src/app.hpp	/^	void show_help(char*);$/;"	p	class:App	typeref:typename:void	access:private	signature:(char *)
App::start	./src/app.hpp	/^		void start();$/;"	p	class:App	typeref:typename:void	access:public	signature:()
App::window	./src/app.hpp	/^	Window window;$/;"	m	class:App	typeref:typename:Window	access:private
Audio	./src/audio.hpp	/^class Audio {$/;"	c
Audio::_add_music_track	./src/audio.hpp	/^	void _add_music_track(char *, char *);$/;"	p	class:Audio	typeref:typename:void	access:private	signature:(char *,char *)
Audio::_add_sound_effect	./src/audio.hpp	/^	void _add_sound_effect(char *, char *);$/;"	p	class:Audio	typeref:typename:void	access:private	signature:(char *,char *)
Audio::_destroy	./src/audio.hpp	/^	void _destroy();$/;"	p	class:Audio	typeref:typename:void	access:private	signature:()
Audio::_get_music_track	./src/audio.hpp	/^	Music * _get_music_track(char *);$/;"	p	class:Audio	typeref:typename:Music *	access:private	signature:(char *)
Audio::_get_sound_effect	./src/audio.hpp	/^	Sound * _get_sound_effect(char *);$/;"	p	class:Audio	typeref:typename:Sound *	access:private	signature:(char *)
Audio::add_music_track	./src/audio.hpp	/^		void add_music_track(char *, char *);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(char *,char *)
Audio::add_sound_effect	./src/audio.hpp	/^		void add_sound_effect(char *, char *);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(char *,char *)
Audio::bgm	./src/audio.hpp	/^	std::map<std::string, Music> bgm;$/;"	m	class:Audio	typeref:typename:std::map<std::string,Music>	access:private
Audio::bgm_volume	./src/audio.hpp	/^	float bgm_volume;$/;"	m	class:Audio	typeref:typename:float	access:private
Audio::destroy	./src/audio.hpp	/^		void destroy();$/;"	p	class:Audio	typeref:typename:void	access:public	signature:()
Audio::get_bgm_volume	./src/audio.hpp	/^		float get_bgm_volume();$/;"	p	class:Audio	typeref:typename:float	access:public	signature:()
Audio::get_master_volume	./src/audio.hpp	/^		float get_master_volume();$/;"	p	class:Audio	typeref:typename:float	access:public	signature:()
Audio::get_music_track	./src/audio.hpp	/^		Music * get_music_track(char *);$/;"	p	class:Audio	typeref:typename:Music *	access:public	signature:(char *)
Audio::get_sfx_volume	./src/audio.hpp	/^		float get_sfx_volume();$/;"	p	class:Audio	typeref:typename:float	access:public	signature:()
Audio::get_sound_effect	./src/audio.hpp	/^		Sound * get_sound_effect(char *);$/;"	p	class:Audio	typeref:typename:Sound *	access:public	signature:(char *)
Audio::init	./src/audio.hpp	/^		bool init();$/;"	p	class:Audio	typeref:typename:bool	access:public	signature:()
Audio::master_volume	./src/audio.hpp	/^	float master_volume;$/;"	m	class:Audio	typeref:typename:float	access:private
Audio::sfx	./src/audio.hpp	/^	std::map<std::string, Sound> sfx;$/;"	m	class:Audio	typeref:typename:std::map<std::string,Sound>	access:private
Audio::sfx_volume	./src/audio.hpp	/^	float sfx_volume;$/;"	m	class:Audio	typeref:typename:float	access:private
Audio::update_bgm_volume	./src/audio.hpp	/^		void update_bgm_volume(float);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(float)
Audio::update_master_volume	./src/audio.hpp	/^		void update_master_volume(float);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(float)
Audio::update_sfx_volume	./src/audio.hpp	/^		void update_sfx_volume(float);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(float)
DEFAULT_BGM_VOL	./src/main.hpp	/^#define DEFAULT_BGM_VOL /;"	d
DEFAULT_MASTER_VOL	./src/main.hpp	/^#define DEFAULT_MASTER_VOL /;"	d
DEFAULT_SFX_VOL	./src/main.hpp	/^#define DEFAULT_SFX_VOL /;"	d
MAIN_HPP	./src/main.hpp	/^#define MAIN_HPP$/;"	d
WINDOW_HPP	./src/window.hpp	/^#define WINDOW_HPP$/;"	d
WINDOW_H_DEFAULT	./src/main.hpp	/^#define	WINDOW_H_DEFAULT	/;"	d
WINDOW_W_DEFAULT	./src/main.hpp	/^#define WINDOW_W_DEFAULT	/;"	d
Window	./src/window.hpp	/^class Window$/;"	c
Window::destroy	./src/window.hpp	/^		void	destroy();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
Window::flag	./src/window.hpp	/^	int flag;$/;"	m	class:Window	typeref:typename:int	access:private
Window::flag_clear	./src/window.hpp	/^		void 	flag_clear();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
Window::flag_get	./src/window.hpp	/^		int		flag_get();$/;"	p	class:Window	typeref:typename:int	access:public	signature:()
Window::flag_reset	./src/window.hpp	/^		void	flag_reset();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
Window::flag_set	./src/window.hpp	/^		void 	flag_set(int);$/;"	p	class:Window	typeref:typename:void	access:public	signature:(int)
Window::height	./src/window.hpp	/^		int		height;$/;"	m	class:Window	typeref:typename:int	access:public
Window::height_reset	./src/window.hpp	/^		void	height_reset();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
Window::init	./src/window.hpp	/^		void	init();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
Window::start	./src/window.hpp	/^		void	start();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
Window::width	./src/window.hpp	/^		int		width;$/;"	m	class:Window	typeref:typename:int	access:public
Window::width_reset	./src/window.hpp	/^		void	width_reset();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
_add_music_track	./src/audio.hpp	/^	void _add_music_track(char *, char *);$/;"	p	class:Audio	typeref:typename:void	access:private	signature:(char *,char *)
_add_sound_effect	./src/audio.hpp	/^	void _add_sound_effect(char *, char *);$/;"	p	class:Audio	typeref:typename:void	access:private	signature:(char *,char *)
_destroy	./src/audio.hpp	/^	void _destroy();$/;"	p	class:Audio	typeref:typename:void	access:private	signature:()
_get_music_track	./src/audio.hpp	/^	Music * _get_music_track(char *);$/;"	p	class:Audio	typeref:typename:Music *	access:private	signature:(char *)
_get_sound_effect	./src/audio.hpp	/^	Sound * _get_sound_effect(char *);$/;"	p	class:Audio	typeref:typename:Sound *	access:private	signature:(char *)
add_music_track	./src/audio.hpp	/^		void add_music_track(char *, char *);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(char *,char *)
add_sound_effect	./src/audio.hpp	/^		void add_sound_effect(char *, char *);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(char *,char *)
audio	./src/app.hpp	/^ 	Audio audio;$/;"	m	class:App	typeref:typename:Audio	access:private
bgm	./src/audio.hpp	/^	std::map<std::string, Music> bgm;$/;"	m	class:Audio	typeref:typename:std::map<std::string,Music>	access:private
bgm_volume	./src/audio.hpp	/^	float bgm_volume;$/;"	m	class:Audio	typeref:typename:float	access:private
destroy	./src/app.hpp	/^		void destroy();$/;"	p	class:App	typeref:typename:void	access:public	signature:()
destroy	./src/audio.hpp	/^		void destroy();$/;"	p	class:Audio	typeref:typename:void	access:public	signature:()
destroy	./src/window.hpp	/^		void	destroy();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
flag	./src/window.hpp	/^	int flag;$/;"	m	class:Window	typeref:typename:int	access:private
flag_clear	./src/window.hpp	/^		void 	flag_clear();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
flag_get	./src/window.hpp	/^		int		flag_get();$/;"	p	class:Window	typeref:typename:int	access:public	signature:()
flag_reset	./src/window.hpp	/^		void	flag_reset();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
flag_set	./src/window.hpp	/^		void 	flag_set(int);$/;"	p	class:Window	typeref:typename:void	access:public	signature:(int)
get_bgm_volume	./src/audio.hpp	/^		float get_bgm_volume();$/;"	p	class:Audio	typeref:typename:float	access:public	signature:()
get_master_volume	./src/audio.hpp	/^		float get_master_volume();$/;"	p	class:Audio	typeref:typename:float	access:public	signature:()
get_music_track	./src/audio.hpp	/^		Music * get_music_track(char *);$/;"	p	class:Audio	typeref:typename:Music *	access:public	signature:(char *)
get_sfx_volume	./src/audio.hpp	/^		float get_sfx_volume();$/;"	p	class:Audio	typeref:typename:float	access:public	signature:()
get_sound_effect	./src/audio.hpp	/^		Sound * get_sound_effect(char *);$/;"	p	class:Audio	typeref:typename:Sound *	access:public	signature:(char *)
height	./src/window.hpp	/^		int		height;$/;"	m	class:Window	typeref:typename:int	access:public
height_reset	./src/window.hpp	/^		void	height_reset();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
init	./src/app.hpp	/^		void init(int, char**);$/;"	p	class:App	typeref:typename:void	access:public	signature:(int,char **)
init	./src/audio.hpp	/^		bool init();$/;"	p	class:Audio	typeref:typename:bool	access:public	signature:()
init	./src/window.hpp	/^		void	init();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
master_volume	./src/audio.hpp	/^	float master_volume;$/;"	m	class:Audio	typeref:typename:float	access:private
sfx	./src/audio.hpp	/^	std::map<std::string, Sound> sfx;$/;"	m	class:Audio	typeref:typename:std::map<std::string,Sound>	access:private
sfx_volume	./src/audio.hpp	/^	float sfx_volume;$/;"	m	class:Audio	typeref:typename:float	access:private
show_help	./src/app.hpp	/^	void show_help(char*);$/;"	p	class:App	typeref:typename:void	access:private	signature:(char *)
start	./src/app.hpp	/^		void start();$/;"	p	class:App	typeref:typename:void	access:public	signature:()
start	./src/window.hpp	/^		void	start();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
update_bgm_volume	./src/audio.hpp	/^		void update_bgm_volume(float);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(float)
update_master_volume	./src/audio.hpp	/^		void update_master_volume(float);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(float)
update_sfx_volume	./src/audio.hpp	/^		void update_sfx_volume(float);$/;"	p	class:Audio	typeref:typename:void	access:public	signature:(float)
width	./src/window.hpp	/^		int		width;$/;"	m	class:Window	typeref:typename:int	access:public
width_reset	./src/window.hpp	/^		void	width_reset();$/;"	p	class:Window	typeref:typename:void	access:public	signature:()
window	./src/app.hpp	/^	Window window;$/;"	m	class:App	typeref:typename:Window	access:private
